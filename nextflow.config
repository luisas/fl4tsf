
params {

    // General
    replicate = 1
    skip_centralized       = false // centralized runs on all data
    skip_local             = false // centralized local runs on local data for each client
    skip_federated         = false

    // Data
    dataset = "periodic"
    sample_tp = 0.5
    cut_tp = "false"
    extrap = false
    data_folder = "../data"
    batch_size = 32

    // Training configuration
    epochs = 100
    lr = 0.01
    lrdecay = 0.99 // 1.0 no decay 
    gradient_clipping = false
    storeweights = false

    // Model configuration
    obsrv_std = 0.01
    poisson = true
    rec_layers = 1
    gen_layers = 1
    units = 100
    gru_units = 100
    latents = 10
    rec_dims = 20
    z0_encoder = "odernn"
    train_classif_w_reconstr = false
    classif = false
    linear_classif = false
    classif_per_tp = false
    n_labels = 1
    input_dim = 1

    // Federated learning configuration
    serverrounds = 15
    decay_onset = 15
    clients = 2
    fractionfit = 1
    fractionevaluate = 1
    localepochs = 3
    numsupernodes = 2
    aggregation = "FedODE"
    alpha = 0.5
    use_wandb = false

    // Output configuration
    outdir                       = "./results"

    // Extra resouces configuration
    use_gpu                      = false

    // Config options
    custom_config_version        = 'master'
    custom_config_base           = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"

}


// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

profiles {
    debug {
        dumpHashes              = true
        process.beforeScript    = 'echo $HOSTNAME'
        cleanup                 = false
        nextflow.enable.configProcessNamesValidation = true
    }
    conda {
        conda.enabled           = true
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        conda.channels          = ['conda-forge', 'bioconda']
        apptainer.enabled       = false
    }
    mamba {
        conda.enabled           = true
        conda.useMamba          = true
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }
    docker {
        docker.enabled          = true
        docker.runOptions       = params.use_gpu ? '--gpus all' : '-u $(id -u):$(id -g)'
        conda.enabled           = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }
    arm {
        docker.runOptions       = params.use_gpu ? '-u $(id -u):$(id -g) --platform=linux/amd64 --gpus all' : '-u $(id -u):$(id -g) --platform=linux/amd64'
    }
    singularity {
        singularity.enabled     = true
        singularity.autoMounts  = true
        conda.enabled           = false
        docker.enabled          = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
        singularity.pullTimeout = '60m'
    }
    podman {
        podman.enabled          = true
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }
    shifter {
        shifter.enabled         = true
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }
    charliecloud {
        charliecloud.enabled    = true
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        apptainer.enabled       = false
    }
    apptainer {
        apptainer.enabled       = true
        apptainer.autoMounts    = true
        apptainer.runOptions    = params.use_gpu ? '--nv' : ""
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
    }
    wave {
        apptainer.ociAutoPull   = true
        singularity.ociAutoPull = true
        wave.enabled            = true
        wave.freeze             = true
        wave.strategy           = 'conda,container'
    }
    gitpod {
        executor.name           = 'local'
        executor.cpus           = 4
        executor.memory         = 8.GB
        process {
            resourceLimits = [
                memory: 8.GB,
                cpus  : 4,
                time  : 1.h
            ]
        }
    }
    test                    { includeConfig 'conf/test.config'                      }
    test_small              { includeConfig 'conf/test_small.config'                }
    ny                      { includeConfig 'conf/ny.config'                        }
    centralized_hyperparam  { includeConfig 'conf/centralized_hyperparam.config'    }  
    centralized_best        { includeConfig 'conf/centralized_best.config'          }
    federated_hyperparam    { includeConfig 'conf/federated_hyperparam.config'      }
    fedode                  { includeConfig 'conf/federated_hyperparam_ODE.config'  }
    physionet_full          { includeConfig 'conf/physionet_full.config'            }
    physionet_filtered      { includeConfig 'conf/physionet_filtered.config'        }
    timescales              { includeConfig 'conf/timescales.config'                }
    ecg_simulation          { includeConfig 'conf/ecg_simulation.config'            }
}


// Load nf-core custom profiles from different Institutions
includeConfig !System.getenv('NXF_OFFLINE') && params.custom_config_base ? "${params.custom_config_base}/nfcore_custom.config" : "/dev/null"


// Set default registry for Apptainer, Docker, Podman, Charliecloud and Singularity independent of -profile
// Will not be used unless Apptainer / Docker / Podman / Charliecloud / Singularity are enabled
// Set to your registry if you have a mirror of containers
apptainer.registry    = 'quay.io'
docker.registry       = 'quay.io'
podman.registry       = 'quay.io'
singularity.registry  = 'quay.io'
charliecloud.registry = 'quay.io'


env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
    JULIA_DEPOT_PATH = "/usr/local/share/julia"
}


// Set bash options
process.shell = [
    "bash",
    "-C",         // No clobber - prevent output redirection from overwriting files.
    "-e",         // Exit if a tool returns a non-zero status/exit code
    "-u",         // Treat unset variables and parameters as an error
    "-o",         // Returns the status of the last command to exit..
    "pipefail"    //   ..with a non-zero status or zero if all successfully execute
]
includeConfig 'conf/tower.config'
includeConfig 'conf/modules.config'